/*
==Note==

 // Code Area 
   - 실행되는 프로그램의 코드가 저장되는 메모리 공간
   - 프로그래머가 작성한 소스 코드들이 저장되는 영역
 
 // Data Area 
   - 전역 변수와 정적 변수값이 저장되는 메모리 공간
 
 // Hepa Area 
   - 프로그래머가 필요에 의해 동적으로 메모리를 할당할 때 사용하는 공간
   - 프로그래머가 직접 관리할 수 있는 공간
 
 // Stack Area 
   - 지역 변수, 매개 변수, 반환값 등 잠시 사용되었다가 사라지는 데이터를 저장하는 공간
   - 함수의 호출과 관계되는 지역 변수와 매개 변수가 저장되는 영역
   - 함수의 호출과 함께 할당되며, 함수의 호출이 완료되면 소멸

 // 동적할당
   - 런타임중에 메모리 공간을 할당 
     (런타임 : 프로그램이 시작되어 동작되고 있는 시간)
   - C언어에서는 malloc(), calloc() 함수를 통해 메모리를 할당
   - 동적 할당된 메모리는 realloc() 함수를 통해 메모리 재할당이 가능
   - 동적 할당을 하고 자료를 전부 사용했으면 free() 함수를 이용하여 해제
   - 해제된 메모리를 가리키는 댕글링 포인터가 되지 않도록 포인터 변수에 NULL값을 재할당
     (댕글링 포인터 : 쓰레기값을 가리키고 있는 포인터)

 // malloc
   - malloc 함수 : void* malloc(size_t size)
   - 함수 호출시 할당하고자 하는 메모리의 크기를 바이트 단위로 전달하면 그 크기만큼 메모리를 할당
   - 할당한 메모리의 주소(첫 번째 바이트의 주소)를 반환
   - 메모리 할당에 실패하면 NULL을 반환
   
 // void 포인터 (범용 포인터)
   - 기본적으로 C언어는 자료형이 다른 포인터끼리 멤모리 주소를 저장하면 컴파일 경고가 발생
   - void 포인터는 자료형이 정해지지 않은 특성 때문에 어떤 자료형으로 된 포인터든 저장이 가능
   - malloc은 단순히 메모리만 할당하는 함수이기 때문에 개발자가 어떠한 데이터 형을 저장하는지 예측 불가
   (예를들어 4바이트를 할당하였을 경우 int형 데이터를 저장하기 위해서 사용하는지, float형 데이터를 사용하는지 예측 불가)
   - void 포인터를 반환하여 개발자가 알맞은 용도로 반환하여 사용할 수 있도록 void 포인터를 사용

 // int* p = (int*)malloc(sizeof(int)) : int 형식의 데이터를 저장할 수 있는 크기의 동적 메모리를 Heap Area에 할당
   - malloc함수를 호출하면 할당된 메모리의 주소가 void*형으로 반환
   - 반환되는 void*를 사용하려는 int*형으로 변환
   - 포인터 변수 p에 변환된 값을 저장

 // free(p) : 동적 할당시킨 Heap 영역의 메모리를 해제
 // p = NULL : 포인터 변수의 값을 NULL값으로 초기화
*/

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#pragma warning(disable : 4996)

int main()
{
    int num1 = 10;
    char c1 = 'a';
    int* numPtr1 = &num1;
    char* cPtr1 = &c1;

    void* ptr;        // void 포인터 선언

	return 0;
}